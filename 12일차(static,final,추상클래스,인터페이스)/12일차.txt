12일차(static,final,추상클래스,인터페이스)

구현방법->2가지가 존재
 ======================
    j1219패키지 작성

 조건1  ==>OpTest.java로 저장할것.(2가지)
 
 실행결과 ==>Scanner->숫자(nextInt()),문자(next())
                                                                 nextLine()

  첫번째 숫자를 입력?6
  연산자를 선택?(+,-,*,/)+
  두번째 숫자를 입력?7
  
  실행결과 13
=======================================================

첫수를 입력?
5
연산자[+,-,*,/]
Exception in thread "main" java.lang.StringIndexOutOfBoundsException: String index out of range: 0
	at java.lang.String.charAt(Unknown Source)
	at j1219.OpTest.main(OpTest.java:20)

  nextLine()때문에 발생이 된 문제->공백,enter
  =>키보드 버퍼에 저장
    (자판키에 특정키를 입력->저장된 장소)
  next()->공백x enter 인식x
==================================================
 nextLine()을 사용해서 문제를 푸는 방법?

 문자,숫자,소수점을 입력->nextLine()입력을 받은 뒤에
 숫자->Integer.parseInt()로 형변환 시키고
 소수점->Double.parseDouble()으로 형변환시키면 된다.
===================================================

 *** API문서를 참조할때 ***

새로운 클래스를 알때마다 ->생성자 먼저 찾아볼것.
생성자가 없으면-->메서드를 통해서 객체를 얻어온다.->정적메서드

1.메서드의 매개변수->객체형(=참조형=클래스형)=>링크문자열
2.메서드의 반환형->객체형(=참조형=클래스형)=>링크문자열
                 ->Thread 적용

getLocalizedInputStream(InputStream in) 
Deprecated. 

=>메서드 중간에 Deprecated =>앞으로 이 메서드는 지원해주지 않는다는
                             경고 표시
-------------------------------------------------------------------

 public static Runtime getRuntime()

Returns the runtime object associated with the current Java application.

=>현재 실행중인 자바app와 연관이 있는 실행객체를 반환

System.gc(); //gc(자바프로그램 내부의 쓸데없는 메모리공간을 해제시켜
                  주는 프로세스)->자동적으로 실행->자동으로 메모리 관리

System.gc();//수동으로 가동시켜주는 메서드

//System.exit(0); 정상적으로 프로그램을 종료시킬때 사용
----------------------------------------------------------------------
** 정적(static)=>멤버변수,메서드,초기화 블럭지정 ,클래스
                  ==============================
                   CarFactory.java

멤버변수(=인스턴스 변수)==>객체생성할때 마다 따로 저장
일반메서드(=인스턴스 메서드)

각 객체별로 공통으로 사용이 되는 멤버변수가 필요로 한다면 (공유)
            static 멤버변수명(공통)
                    메서드필요->static 메서드명()

공통으로 사용=>아파트 관리비

** 정적 멤버변수 **
-----------------------------------------------
static 필드(멤버변수) + static  메서드

개별 객체를 생성하지 않아도 메모리에 만들어져 있다
 (메모리에 먼저 로드된다.)

클래스명.static멤버변수     
객체명.static멤버변수
         
일반메서드 및 static메서드 내부에서 자유롭게 접근할 수 있다.(공유)
--------------------------------------------------------------------

**정적 메서드**

1)static 멤버변수만 접근할 수 있는 메서드
2) 일반 멤버변수는 접근할 수 없다
   ( 이유는 this를 사용할 수 없기 때문이다)         
3) 클래스명.static메서드()객체명.static메서드()
4) static 메서드 내부에서 static 메서드만 호출가능하다
5) 객체 생성 없이 호출 할 수 있다.   

 **인스턴스 블럭**

 { //생성자 오버로딩할때 공통으로 사용되는 구문이 필요하면 설정
   //객체생성할때 마다 호출
    System.out.println("인스턴스블럭 생성자의 공통적인 부분을 기술");
  }
---------------------------------------------------------------------
***static 블럭***

  //클래스내부에 초기화 블럭을 작성->static 영역 또는 static 블럭
   static {
	 System.out.println("제일 먼저 main()보다 먼저 실행해야할 구문이 있다면 사용");
	 System.out.println("DB접속이 가능하도록 환경설정을 하고자할때");
	 System.out.println("1.static 멤버변수 2.main()호출,다른 정적메서드,클래스로드");
  }
-----------------------------------------------------------------
 재귀호출

 =>재귀의 순환횟수를 제어하지 못하면->메모리나 프로그램 스택등의
   자원을 과다하게 사용해서 위험하다.

 =>**시큐어코딩**

   1.정보노출 코딩
   2.최적화된 메모리 사용을 하기위한 코딩방식을 배울 목적

 =>외부에서 해킹으로 인해서 프로그램의 정보를 외부에 노출이 될 수 있다
 =>DB연동->소스에 코딩->파일로 만들어서 불러온다.(파일 암호화)
=====================================================================
   RecuError.java

showHi(cnt--); 

 showHi(cnt);
  cnt--;
==============
cnt--;
showHi(cnt);
------------------
 문제점
1.반복할 횟수가 넘어오면 반복할횟수가 감소가 안된상태 자기 자신의
  메서드를 호출

2.반복할 횟수1->빠져나가는 구문이 뒤에 위치X->맨 앞에 위치
===================================================================
  FinalTest.java

1.final 변수명(멤버변수,지역변수)=>상수화된 변수를 작성
         ->일단 저장->중간에 갑이 변경되면 안되는 경우

2.final 메서드명=>상속은 허용해주지만 오버라이딩 금지
                =>내용변경 금지

3.final class명->상속금지 클래스->중요한 클래스
                System(내용 수정 금지)목적

   부모클래스

final class->상속X  오버라이딩X
           ->메서드 30개->내용변경X

목적=>모든 메서드를 오버라이딩 금지->차라리 상속X

final 메서드명->상속 O 오버라이딩 X =>특정 메서드만 변경
===============                       금지

오버라이딩 할때->접근지정자를 변경할 수 가 있다.

 private < default < protected < public 
           (default),protected ,public
                   (protected), public 
                               (public)
*****************************************************
 상속받은 자식클래스에서는 부모의 메서드를 오버라이딩
할때 접근지정자는 최소 부모의 접근지정자와 동일하게 주거나
 접근지정자의 범위를 줄일수 없다.
********************************************************
 추가문법

 import 최상위패키지명.하위패키지명...불러올 클래스명;
 import 최상위패키지명.하위패키지명...*;

 p342=>  static import문

 
--------------------------------------------------
 추상클래스,인터페이스=>설계할때 사용(뼈대)->업무

1.추상메서드

   메서드의 종류(객체 생성 유무)

1.일반메서드
2.정적메서드
3.추상메서드=>1)메서드의 선언만 되어 있는 메서드->{} X

                 public void go(); //~메서드명(~);

                 public void go(){   //일반메서드
                      //메서드의 내용
                    }
                 ---------------------------------------------------------
                         구분  p376
                     1) public abstract void go(); O   ->{  } X
                         abstract public void go();  //abstract키워드
                     2) public void go(){  내용 X} //일반메서드
                     --------------------------------------------------
                     2) 추상메서드를 구분->앞에 abstract 예약어를 사용
                     3) 추상메서드를 가지고 있는 클래스->추상클래스라고 부른다
----------------------------------------------------------------------------

   메서드의 종류(기능)

1.매개변수 X  ,반환형 X
2.매개변수 O  ,반환형 X
3.매개변수 O  ,반환형 O
----------------------------------

***2.추상클래스(p375)=>일반 클래스

                   특성

             1)추상 클래스->클래스 내부에 추상메서드가 한개라도
                                   존재한다면 추상클래스가 된다.

                    ->abstract class 클래스명->구분
                    ->abstract public class 클래스명
                       public abstract class 클래스명

             **2)추상클래스를 상속받은 자식클래스는 무조건 추상메서드를
                반드시 오버라이딩을 해야 된다는 규칙(강압,강제성격)
                 ->선택문제 X

             **3)객체를 생성할 수가 없다.
             *******4)사용목적:설계목적(업무)*******
=========================================
         =>Test.java

  **메서드의 호출유형**

==========================================================
1.정적메서드(main)->일반메서드->객체생성->객체명.일반메서드(~)
    정적메서드 내부에서 일반메서드를 참조할 수 없다.->객체없이는 호출X

2.일반메서드->일반메서드->객체명을 생략->this.일반메서드명(~)

3.정적메서드->정적메서드를 호출=>클래스명.정적메서드명(~)
                                클래스명을 생략->정적메서드명(~)

4.생성자->생성자호출=>this(매개변수~);
==========================================================
 추상클래스,인터페이스 개요,특성?=>설계?
 ***String->method=>String클래스=>문제->과제
    StringBuffer

  =>객체형변환->Swing
==========================================




