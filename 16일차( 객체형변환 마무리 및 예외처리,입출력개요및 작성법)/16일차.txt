16일차(객체형변환 마무리 및 **예외처리,입출력개요및 작성법)
                             ========== =====(네트워크)====

****************p357 객체의 형변환************************************

한 개이상의 상속관계 있는 클래스에서 자식클래스의 객체는 부모형으로 자동
형변환이 일어나지만 반대로 부모클래스의 객체는 자식클래스형으로 자동형변환이
되지를 않는다.=>객체의 명시적인형변환을 줘야 된다.

************************************************************************
1.객체 자동형변환==>부모형<===자식객체
2.객체 명시적인형변환 =>부모형객체==>자식형X
                                    (자식형)
===============================================================
       Product(제품)->추상적인것(범위가 넓은 용어)
            |
       TV   Computer Audio  =>제품의 종류

  ->제품을 산다.(tv,computer,audio)->대상자는 다른데 사용하는 메서드는
                                     같다(메서드이름은 통합)
==================================================================
 **형변환이 중요한 이유->메서드 작성때문**=>CastTest.java

  buy(TV t),buy(Computer c),buy(Audio a),,,,=>종류가 많아지면 오버로딩
                                              도 불편하다.
  buy(Product p) 하나로 통합이 가능하다.
====================================================================
  -->메서드는 한개로 작성(매개변수의 자료형을 하나로 통합)=>부모형
*****
 자식클래스의 객체--->부모형으로 형변환이 자동적으로 일어난다.
  (객체 자동형변환 기법을 이용해서 하나의 메서드로 통합)
****

package j1226;

//각 직원별로->세금율을 계산->출력(taxRate())
class Employee { //직원(추상적)->범위가 넓다(Product)
	
	public void taxRate(Employee e) { //객체 자동형변환
		//내부에서 각각의 객체를 구분하는 코딩->객체 명시적인 형변환
		if(e instanceof Manager) {//Manager라면
			Manager m=(Manager)e;
			System.out.println("Manager에 맞는 세금 계산율(.5%적용)");
		}else if(e instanceof Engineer) {
			Engineer en=(Engineer)e;
			System.out.println("Engineer에 맞는 세금 계산율(.7%적용)");
		}else if(e instanceof Employee) {
			System.out.println("Employee에 맞는 세금 계산율(.2%적용)");
		}
	}
	/* 
	    업무별로 세금율이 다 다르기에 직원의 수가 많고 업무가 복잡
	 * 중복된 코딩이 반복적으로 사용할 수 밖에 없다.(단점)=>공식은 동일
	 * 상속관계->가장 최상위 부모클래스형으로 형변환->메서드 내부에 따로 계산
	 * 
	   public void taxRate(Manager e) {}
	   public void taxRate(Engineer e) {}
	   */
}
//팀장의 역할+일반직원으로서의 역할(->TV,Computer)
class Manager extends Employee{
	//public void taxRate(Manager e) {} 원래는 오버라이딩으로 각각 구현해야한다
}

//엔지니어로의 역할+일반직원으로서의 역할(Audio)
class Engineer extends Employee{
	//public void taxRate(Engineer e) {}
}

public class CastTest {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Employee emp=new Employee();
        Manager man=new Manager();
        Engineer eng=new Engineer();
        //세금율을 계산->taxRate()->책에서는 buy()
        emp.taxRate(emp);//emp.taxRate(new Employee());
        man.taxRate(man);//man.taxRate(new Manager());
        eng.taxRate(eng);
	}
}
=============================================================7장끝====
 **예외처리(p414)**

 **예외->정상적인 프로그램의 실행을 방해하는 에러 또는 오류들
     ->프로그램 자체는 문제가 없는데 사용자가 잘못 입력해서 에러가 발생
     ->사용자들에게 어떻게 하면 에러가 안나오는지 알려주는 코딩을 추가
       시켜서 작성==>예외처리
                     ========

 컴파일 에러->컴파일할때 에러가 발생
            =>물리적인 에러====>오타->눈에 확인이 가능

              논리적인 에러=========>논리적으로 맞지 않은 에러
                                     컴파일할떼 에러표시가 안나온다.
                                     (눈에 확인X)

객체형변환
예외처리개념
예외처리작성법Exception in thread "main" 
java.lang.ArrayIndexOutOfBoundsException: 3 =>index 번호 3이 없기에
                                            =>출력할 수 없다 에러발생
	at j1226.HelloTest.main(HelloTest.java:10)

**
java.lang.ArrayIndexOutOfBoundsException=>배열의 첨자에 문제가 발생이
                                          되면 나오는 에러메세지
**

 실행 에러->실행할때 발생하는 에러(ex 자바스크립트 에러)

                                Throwable
                                      |
                 Exception(고칠수 O)   Error(고칠수 X)->물리적
                      |
            IOException,,,RuntimeException
             Non-RuntimeException
==============================================================
HelloTest.java 작성

** 예외처리 방법 2가지** (HelloTest2.java로 사용)

1) 메서드에 예외 선언하기->예외발생처리->메서드에 부탁(떠넘기기)
**2) 메서드내부에서 직접 처리하기 (권장) p434 ->try~catch~finally구문

객체형변환
예외처리개념
Exception in thread "main" 예외처리작성법
java.lang.ArrayIndexOutOfBoundsException: 3
	at j1226.HelloTest2.go(HelloTest2.java:23)
	at j1226.HelloTest2.main(HelloTest2.java:8)
-----------------------------------------------------
***************************************************
  형식)  try{

           예외가 발생가능성이 있는 구문을 써준다.
          }catch(예외처리클래스명 예외객체명){
            처리하는 구문,,
           -----------------------------------------------
           1)e.getMessage()->아주 간단한 에러메세지 출력
         **2)e.toString()->중간정도의 에러메세지를 출력
           3)e.printStackTrace()-> 관련된 예외처리클래스를
                                   다 찾아서 에러메세지를 정보
            -------------------------------------------------
          }catch(예외처리클래스명2 예외객체명2){
            처리하는 구문2,,
          }finally{
            예외가 발생한것과 상관없이 무조건 수행을
            해야되는 구문
            //지금까지 작업한 내용->전부파일로 저장종료
            //DB접속한 부분을 해제구문
          }
****************************************************
-------------------------------------------------
객체형변환
예외처리개념
예외처리작성법
배열의 첨자가 잘못 계산되었습니다.확인요망!
3
java.lang.ArrayIndexOutOfBoundsException: 3
java.lang.ArrayIndexOutOfBoundsException: 3
예외처리 끝!
	at j1226.HelloTest2.go(HelloTest2.java:31)
	at j1226.HelloTest2.main(HelloTest2.java:9)
======================================================
자주 발생이 되는 예외처리 클래스?

 ExceptionTotal.java

매개변수 2개입력(동적배열)
Exception in thread "main" a=9,b=0
java.lang.ArithmeticException: / by zero
	at j1226.ExceptionTotal.main(ExceptionTotal.java:11)

***===============================================
1.java.lang.ArithmeticException: / by zero

 =>어떤수를 0으로 나눌때 계산이 안되는 경우 발생되는 에러메세지

a=9,b=0
java.lang.ArithmeticException: / by zero
9를 0으로 나눌수가 없습니다.

2.IOException=>입,출력에서 에러가 발생이 되는 경우
 (input/output) =>파일 입출력할때 발생

**3.NumberFormatException=>int a=Ineger.parseInt("9")
                        문자열 상수대신에 직접적으로 문자를 입력받
                        는 경우 발생("9")=>9
                         =>웹프로그래밍->페이지이동 할때 매개변수전달
                         =>제대로 전달X

java.lang.NumberFormatException: For input string: "a" ==>숫자
문자열 상수만 입력가능하고 문자는 입력불가

**4.NullPointerException=> 똑같은 객체를 두번이상 생성할때
                         ex) JButtion b1=new JButtion("임시");
                             JButtion b1=new JButtion("임시2");
                             객체를 생성하지 않고 메서드를 호출하는경우

                              b2.setBackground(Color.red);//Null

매개변수 2개입력(동적배열)
java.lang.NullPointerException
위에서 발생한 예외처리외의 다른 예외처리를 처리해줄때 사용
---------------------------------------------------------------

5.ArrayIndexOutOfBoundsException=>배열의 문제발생

 java.lang.ArrayIndexOutOfBoundsException: 0
입력받은 갯수는 2개를 입력해야 합니다.
================================================================
 선발투수6 7,8(중간계투),9회(마무리)->Exception

 =>다른 예외처리보다 먼저 맨 앞에 위치하면 안된다.

==>***자바에서 반드시 예외처리를 해야되는 경우

      1)입출력 프로그램을 작성할때->IOException
      2)네트워크 프로그램을 작성할때
      3)DB접속을 해서 처리해주는 JDBC Programming을 할때


  예외처리 클래스-->**Checked Exception계열=>반드시 예외처리구문을 사용
                                           하지 않으면 컴파일자체가
                                           안된다.(예외처리 강요)

               1)입출력 프로그램을 작성할때->IOException
               2)네트워크 프로그램을 작성할때
               3)DB접속을 해서 처리해주는 JDBC Programming을 할때**
 ------------------------------------------------------------------

 --------------------------------------------------------------------

                   UnChecked Exception계열=>예외처리를 구지 사용하지
                                            않더라도 컴파일할때 문제
                                            가 없는 클래스

   ***
=========================================================
자원=>DB에 접속,이미지 저장,,,자원반납=>~.close()

 사용자정의 예외만들기=>Exception클래스를 상속->자식클래스
--------------------------------------------------------
  super(msg)==>에러메세지=>Exception클래스를 직접
            =>**throw new Exception(); ==>
                =====
 ******************************************************************
  형식) throw new 발생시키킬원하는 예외처리클래스명("에러메세지")
       ->가상으로 에러를 발생시키는 구문
 ******************************************************************

          ExceptionTest.java


    메서드명(~) throws IndexOutOfBoundsException
                =======

  WriteHello.java

 
 입출력 15장 =>쓰레드=>*****컬렉션(필수)****=>네트워크
 ===========
 **채팅프로그램=>예외처리,입출력,쓰레드,컬렉션,네트워크(정리)
 **JDBC Programming=>
=============================================================
  자바에서 입출력프로그램을 작성할때 

1.import java.io.*을 줘야된다.
2.반드시 예외처리를 해야 된다.=>Check Exception계열의 클래스를 사용
                                 하기때문에
==================================================================
** 차이점**

System.out.println(출력변수명)
           =======
변수에 저장된 내용을 있는 그대로
출력하라고 할때 사용


System.out.write(출력변수명)
=>출력내용을 아스키코드값에 맞게
 변환한후 출력
-----------------------------
 입출력->기본 지식->파일업로드,다운로드
=======================================
입출력->쓰레드->컬렉션->네트워크=>프로젝트=>JDBC
=================================================












