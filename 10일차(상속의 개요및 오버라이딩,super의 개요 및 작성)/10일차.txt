10일차(상속의 개요및 오버라이딩,super의 개요 및 작성)

//****형식) 메서드 작성방법과 동일->(자료형 ... 배열명) 
	//가변형의 매개변수는 항상 메서드의 맨 마지막에 위치
	public void print(String a,String ... names) {
		//String names[]={"홍길동"}
		//String names[]={"홍길동","이길수"}
		//String names[]={"홍길동","이길수","테스트",,,,,}
		for(int i=0;i<names.length;i++)
			System.out.print(names[i]+",");
		System.out.println();
	}
-------------------------------------------------------------
 난수->임의의 수(0~0.99999999999999999999...) 1에 가까운 수를
       만들어주는 것

       Math.random()->난수를 발생시켜주는 메서드
                    *10

       int tmp=numArr[0];
       numArr[0]=numArr[n]<===n (난수를 통해서 만들어진 숫자)
       numArr[n]=tmp;

***********************************************
중복된 코드줄이기-->따로 메서드를 작성해서 호출
재사용성
**********************************************************
사람->부모->자식(돈,부동산)=>상속
      부모클래스 자식클래스=>멤버변수,메서드 중심
       (슈퍼클래스) (서브클래스)  생성자X(구조)->접근지정자와 상관없음
                       private 멤버변수,메서드->상속불가
                       static(공유)->상속X
*************************************************************
**상속 장점

1.기존의 부모클래스의 멤버변수,메서드를 그대로 사용
                  ->부모의 소스코드를 그대로 사용(=재사용성)

2.코딩양이 줄어들고 개발시간이 단축
----------------------------------------------------------

**상속의 특징
 다중상속 불가-->단일 상속만 가능
 (동시에 한개이상의 부모로부터 상속금지)->C++(다중 상속허용)

형식) 자식클래스 extends 부모클래스
      자식클래스 extends 아버지,어머니(X)
                           sub()   sub()
 단점=>프로그램이 복잡->서로 다른 클래스->sub() 똑같은 메서드
                                                존재
  =>사용금지=>인터페이스를 이용(구현)->보충,보완개념

 A클래스 ======>B클래스

1000 줄->단순,반복,기능,,,(800라인 같다면) 800복사
                                              +
                                           200(추가)=1000
               200라인
===========================================================
p316 *****클래스들간의 관계*****
  종류,특성

 1.has a 관계->포함관계->두 클래스들 연결=>서로 상대방의
                         멤버변수(값저장),메서드를 호출
                         =================================
                         생성자 또는 메서드 또는 멤버변수에
                         상대방의 클래스 객체를 생성하는 구문
                         ====================================
  import ->서로 떨어져 있는 클래스를 불러오는 방법
  has a ->논리적으로 떨어져 있는 클래스를 불러오는 방법
          포함 (물리적 X)=>Inner Class                          


 2.is a 관계-->상속에서만 적용이 되는 관계설정

   ex) A는 B이다.->p->q (참)
                   q->p  (거짓)
   ---------------------

팀장은 그 회사의 직원이다.(참)

직원은 그 회사의 팀장이다.(팀장일 수도
                          아닐수도 있다)
                거짓

도형->점,선,삼각형,원

원은 도형이다.(참)
도형은 원이다.(거짓)
---------------------------------
 도서 대여점 프로젝트

1.도서
2.고객
     ->일반회원
     ->특별회원(혜택)

 class 특별회원 extends 일반회원 

  특별회원은 일반회원 (참)
  일반회원은 특별회원 (X)->거짓
================================
  class 고객 extends 도서=>물리적으로 문제X
                           논리적으로 문제가 있다.

3.매매상,,,
====================================================
물리적인 에러->오타
논리적인 에러->문법적으로는 문제가 없다. 그런데 논리적으로
               맞지 않는다.
====================================================
상속->오버라이딩(overriding)

부모클래스로부터 메서드를 상속받았을때 자식클래스의 입장에서
물려받은 메서드의 내용이 자식클래스에 맞지않을때 
자식클래스내부에서 메서드의 내용을 수정하는 기법

->ex)파일 덮어쓰기,자동차(엔진 교체)=>내용을 변경
----------------------------------------------------------
 super,super()부모클래스 입장<----->this,this()->자식클래스입장
부모클래스의 객체

 this->상속전->현재 생성된 객체를 가리킨다.
       상속후->자식클래스의 객체를 가리킨다.
===========================================================
**상속의 특징2**

1.p325 Object 클래스

 자바에서 작성하는 모든 클래스는 java.lang.Object를 상속받는다.

2.자식클래스의 객체를 생성->먼저 부모클래스의 생성자를 호출하고
                            나서 자식클래스의 생성자를 호출

  ->super()때문에->부모클래스의 생성자를 호출하라 (생략이 가능)
    -------------
    super(매개변수,매개변수2,,,)->매개변수가 있는 부모클래스의
                                  생성자는 생략X
                                =>호출할려면 반드시 명확하게
                                  super(5,4);
  =>생성자호출 매카니즘 방법->p335

 InheriTest.java
============================================================
public String toString()

Returns a string representation of the object.
==>이객체의 주소값을 리턴

 In general, the toString method returns a string that "textually represents" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. 
The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: 

 getClass().getName() + '@' + Integer.toHexString(hashCode())

=>패키지명.소속클래스명+'@'+ 메모리의 16진수형태의 문자열

c.toString()=>j1215.Child@5c647e05
              패키지명.소속클래스명@주소값
===========================================================
상속2->상속과 생성자와의 관계->super,super(),
String,StringBuffer
=============================================
static,final,추상클래스,인터페이스 진행
---------------------------------------

























