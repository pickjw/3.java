4일차(제어문2 작성법(switch,for,while,do~while,break))

->1.제어문의 특징,종류 기억->조건문,선택문,반복문,탈출문
     =>과제(중첩 if문 형태)

  2.과제풀이->한계->6장 자바(객체지향언어)->추상화,캡슐화
                  ->생성자까지 과제풀이2

 **if->switch~case=>while,do~while,**for->break,continue
---------------------------------------------------------
 SwitchTest.java

 score>=80 && score < 90
=>80 <=score && score < 90
--------------------------

switch~case=>다중 if문을 대용->속도가 느려진다.(단점)
           ->다중 if문보다 속도가 빠르다.

p148 제약조건

조건식->정수만 가능->7.0이상 부터 문자열도 지원이 가능하다.
                     =====================================

형식) switch(조건식){//1)정수--->문자열까지 지원
     case 값1: //2) 범위를 지정하기가 쉽지않다.
                    (score >=80 && score<90)
              실행1;
              break;//3)break 탈출문 줘야 된다. 
     case 값2: 
              실행2;
              break;
     case 값3: 
              실행3;
              break;
     ,,,
     default: //생략가능->다중 if문의 맨 마지막의 else
              실행n;
              break;
   }
=======================================================
save as SwitchTest2.java


 if(month==3){

 }else if(month==4){

 }else if(month==5){

 }

gender=regNo.charAt(7);//String클래스의 charAt메서드
========================
score=100/10=10
       90/10=9

예제 4-4,예제 4-10
==================
조건문,선택문

반복문=>특정한 조건에 따라서 특정한문장을 반복해서
        실행을 시켜주는 제어문

WhileTest.java==>과제(WhileTest2.java)

반복문의 종류

1.반복할 횟수가 정해져 있는 경우(1~100)합계

  =>**for문***,while문,do~while

 while(조건식)//1.조건식 체크->참(~하는 동안)
    실행문장; //2.실행

2.반복할 횟수가 정해져 있지 않은 경우=>입출력 프로그램

  =>ex) 파일을 읽어들여는 경우

   =>for문 사용하기가 힘들다.
   =>while,do~while구문을 사용

반복문을 사용할때 주의할점

=>끝도없이 실행이 되는 구문=>무한루프=>강제 종료
=>조건식 때문

프로그램 관리자를 사용,이클립스->강제종료->버튼
==================================================
**
 하나의 조건식에 처리할 문장이 한문장 이상이다
 =>{


   }
**
               int i=1;
		while(i<=10) { //1<=5,,,5<=5
		   System.out.println("while반복문 연습"+i);
		   i++;//i=i+1  i+=1
		}//while

 while=>처음부터 조건식이 만약에 거짓이면 한번도 실행되지
        않는다.

 강제로 무한루프 만드는 방법

 while(true){ //항상 참
     계속해서 실행할 문장
 }
============================
do{
  계속해서 실행할 문장

}while(조건식);// do~while구문 뒤의 while조건식 뒤에 ; 준다

ex)
do {
    System.out.println("while반복문 연습"+i);
			   i++;
  }while(i<=5);

실행순서->1.do~while구문의 문장부터 실행
          2.while조건식을 체크

**특성

조건식이 거짓이라도 최소 한번은 무조건 실행이 된다.
-----------------------------------------------------------
**do~while=>화면에 데이터(오라클)를 출력할때 (누적의 개념)
          =>벽돌쌓기 (게시판에서 글쓰기)
         기존의 데이터+내가 글쓴 데이터를 한꺼번에 보여주기
----------------------------------------------------------
for문->반복문 =>ForTest.java =>이중 for문
            1)     2)5)8)     4)7)
형식) for(초기식;조건식;증감식){
            실행할 구문;//3)6)
            실행할 구문2;
        }
  =>이중 for문

      *** int c=1;//초기식
      ***//c++; 증감식은 for문 밖에 선언X ->for문 내부에 작성
      for(;c<=20;) {//while(c<=20)
    	  System.out.println("20번 반복"+c);
          c++; //c=c+1
      }

 p168 ->for문->무한루프를 만들 수 있다.

                 i=1,3,5,7
 증감식->i+=2--->i=i+2
         i*=3--->i=i*3
------------------------------------------
  
i=1  1<=5  sum=sum+i ->sum=0+1->1
i=2              1+2 ->3
i=3                     3+3=>6   
,,, 
=================================
i=1  1<=5  gap=gap*i -->gap=1*1->1
i=2  2<=5               gap=1*2=>2
i=3  3<=5               gap=2*3=>6
i=4  4<=5               gap=6*4=24
i=5  5<=5               gap=24*5=120
----------------------------------------
***이중 for문(=중첩 for문)***
----------------------------------------
ForTest2.java

           //1)    2)10)      9)
형식) for(초기식;조건식;증감식){ //outer for
                   |
                 3)     4)7)     6)
           for(초기식;조건식;증감식){ //inner for
               실행할 문장1;//5)
           } 
           실행할 문장2; //8)
        }
      다른 실행문;
---------------------------------------------------
star2

*****
*****
*****
*****
*****

*     1행 별1  i=1  1<=1 * 2<=1 
**    2행 별2  i=2  1<=2(i) * 2<=2 * 3<=2
***   3행 별3  i=3  1<=3(i)->3<=3 *** 4<=3
****  4행 별4  i=4  1<=4(i)->4<=4 **** 5<=4
***** 5행 별5  i=5  1<=5(i)->5<=5 ***** 6<=5
------------------
1.행의 수는 5그대로인데 
  별의 개수는 차이있다.
   =>밖의 for는 그대로 유지
 
2=> i=j
----------------------------
***** j=5
****
***
**
*

행이 증가 ->밖의 for문은 그대로 유지
1행=>별이 5개부터 시작
2행=>별4개
3행->별3개
2행->별4개
1행->별5개
      j--

 중첩 제어문 =>제어문 내부에 또 다른 제어문사용
-------------------
if(){
  if(){

   }

}

탈출문==>반복문 내부에서 어떤 특정한 조건이 만족하면
         그 반복문을 탈출하게 해주는 구문

 while(true){
    if(sum > 100)
     break;

 }


1.break문-->switch~case구문내부의 break과 같은 역할
          -->ForTest2.java save as BreakTest.java
             이름을 변경

  if(b==2) break;

  break=>이 조건에 만족하는 구문이 존재하는 현재
         반복문을 탈출하라
        
-------------------------------------------------
2.continue문
-------------

=>탈출문->break,continue
=>문제풀이
--------------------------------------------
=>6장 클래스?
      p232 객체? 와 인스턴스
      p249 메서드? 종류
      p252 메서드의 선언과 구현->작성 방법
           메서드=>

추상화->캡슐화->다형성->배열->상속성
  (1)
---------------------------------------------












