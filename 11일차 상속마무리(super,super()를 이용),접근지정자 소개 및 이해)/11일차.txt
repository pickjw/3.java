11일차 상속 활용 마무리(super,super()를 이용),
       접근지정자(=접근제한자) 소개 및 이해)=>캡슐화
----------------------------------------------------
j1218
  |
   -SuperTest

   서술형->~ 기술하시오. 비교해서 설명하시오.
             코딩(한줄~두줄 범위)

**************************************************
p330
super->부모클래스의 객체를 가리키는 예약어
     <->this->자식클래스의 객체를 가리키는 예약어
              (=상속전 현재클래스의 객체)

   자식클래스의 멤버변수=부모클래스의 멤버변수
    =>SuperTest2.java


super()->부모클래스의 기본생성자를 호출하라
      <-->this()->자식클래스의 기본 생성자를 호출
super()은 생략이 가능->자동으로 만들어져서 호출(자동)

super(매개변수)=>생략할 수 없다.->호출하는 구문도 수동
               =>컴파일러가 안만들어준다.호출X
               =>부모클래스에 매개변수에 해당하는 생성자
                 가 반드시 존재해야 한다.(수동)

오버라이딩(Overriding)=>재정의와 같은 말
	  오버라이딩->전의 부모클래스의 메서드를 호출할 수가 있다.
	  부모클래스의 오버라이딩 되기전의 메서드를 호출하고 싶다.
	  super.부모클래스의 메서드명();

 실무에서 어떻게 활용? 상속활용
_________________________________________________________

super(매개변수,,,,)
**************************************************
상속과 생성자와의 관계->호출방식이 틀리다.=>어떻게 활용?
 super,super() 특징

 super.멤버변수, super.메서드()
                 ==============

결론->재사용성을 위해서 ,중복된 코딩을 줄일 목적으로 사용
    ->개발시간이 단축

=>추상클래스,인터페이스 이해=>설계목적=>업무를 이해(팀장)
->회사에서 3개월 인턴

 추상화->캡슐화->다형성->배열->상속성

       (private,public,protected,default)p344~353

 static,final->추상메서드->추상클래스->인터페이스
===========================================================

** 접근지정자(=접근제어자) 사용목적 **

1.올바른 값만 저장하기위한 수단=>최소한으로 접근을 허용

2.현재 내부 클래스에서만 사용할 목적-->외부에서 접근차단

=============================================================

1.private =>자기 클래스 내부에서만 사용이 가능->외부에서 접근차단
            자기 패키지내의 다른 클래스도 접근차단

          =>내부 네트워크만 가능

------------------------------------------------------------------
**접근이 가능하다=>접근하고자하는 클래스의 객체를 생성
                   멤버변수에 값을 저장,조회, 독특한 메서드를 호출
                   이 가능하기때문에
-------------------------------------------------------------------
2.default=> 자기 클래스 내부에서도 사용이 가능->외부에서 접근차단
            자기 패키지내의 다른 클래스 접근허용
                 (폴더)
--------------------------------------------------------------------
***에러메세지 구분 **

 A cannot resolved ~=>생성할 클래스의 위치를 모를때 발생하는 에러메세지
                    =>import를 해줘야 된다.
                    =>접근지정자 때문에 발생하는 에러메세지가 아니다.

 ~print2() is not visible=>접근지정자때문에 발생하는 에러메세지
---------------------------------------------------------------------
3.protected 권한 =>default 권한과 기능이 같다.
                   자기 클래스 내부에서도 사용이 가능->외부에서 접근차단
                   자기 패키지내의 다른 클래스 접근허용
                        (폴더) 
                 =>다른 패키지에서는 접근이 차단

                **(예외)다른 패키지에 있는 클래스라도 접근하고자하는 클래스를
                   상속받은 자식클래스의 접근을 허용 **
------------------------------------------------------------------------
4.public 권한 =>패키지,자기클래스에 상관없이 자유롭게 접근이 가능하다.
                (단 멤버변수와 메서드에만 적용X)
                단
         =>****public class로 시작하는 경우 ->클래스(=프로그램이름)=파일명**
------------------------------------------------------------------------------
               =>class로 시작하는 경우 ->클래스(=프로그램이름)=파일명
               =>접근불가
------------------------------------------------------------------------
 프로젝트-->팀별,부서별로 프로젝트=>외부에서 접근해서 멤버변수,메서드를 호출

              public class로 시작 작성  ====>외부에서 접근해서 사용
              public 멤버변수
              public 메서드

   ====================================================================
        *** public class 시작=>웹프로그래밍=>웹에서 불러다 사용하는 클래스
                                             =>자바빈즈
              private 멤버변수
              public 메서드=>Setter,Getter
-------------------------------------------------------------------------------
              class 시작=>내부용(내부 패키지용)
              private 멤버변수
              public 메서드=>Setter,Getter
-----------------------------------------------------------------------------
*** 자바에서의 객체 생성 방법 ***

1.new 연산자를 이용해서 객체를 생성->보편적



    값에 의한 전달방법->Call By Value==>CallByValue.java
===>주소에 의한 전달방법(=call By Reference)->포인터 변수
   ==>웹프로그래밍 
//caller method--->work method
//매개변수를 전달(기본자료형(8가지)->전달->call by Value(값에 의한 전달방법)
//원본의 값(x=5)------->복사(x)--->전달(x=10)
public class CallByValue {
	//int r=-1,g=-1,b=-1;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        //r(0~255),g(0~255),b(0~255)=>0,0,0~255,255,255->16만 color
		int r=-1,g=-1,b=-1;
		System.out.println("before:red="+r+",green="+g+",blue->"+b);
		//change_color호출
		CallByValue.change_color(r,g,b);
		System.out.println("after:red="+r+",green="+g+",blue->"+b);
	}
	
	//색깔을 변경시켜주는 메서드(수정 목적)
	static void change_color(int r,int g,int b) { //-1,-1,-1
		r+=10;//r=r+10; //9
		g+=50;//g=g+50;//49
		b+=100;//b=b+100;//99
		System.out.println("메서드 내부의 r="+r+",g="+g+",b="+b);
	}
	
}
------------------------------------------------------------------------

**2.메서드의 매개변수를 통해서 객체를 전달받는 경우(=주소를 전달받는 경우)

    CallByValue.java=>save as CallByRef.java
    -------------------------------------------
           -------->메서드 처리해야할 값   매개변수 종류->1)기본형(자료형)
                                                            8가지

                                                          **2)객체형(=참조형
                                                                   =클래스형)

**3.메서드의 반환형를 통해서 객체를 전달받는 경우
          (byte,short,int,long,float,double,char~)
           객체형
===========================================================================

 과제=>p268 참조형 반환타입
            static(초기화 블럭)p302~302,final
            static 멤버변수->p304~307
            static 메서드=>클래스메서드 p278
==============================================
            final 클래스명
                  멤버변수
                  메서드  ? =>예습
===============================================
            String,StringBuffer클래스의 차이점?
-------------------------------------------------
            추상메서드=>추상클래스->인터페이스
-------------------------------------------------->자바문법 끝
















