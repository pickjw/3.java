3일차(연산자2,제어문의 개요및 작성법)

Op3.java

**3.관계연산자(=비교연산자)=>수식결과->true or false(boolean)
     >,>=,<,<=

********************************
   ==(동등비교),!=(같지 않다.)
   =(대입연산자)
 p140

1)기본형 ->변수에 저장된 값을 비교
      int a=4,b=4;

       if(a==b) ->if(a!=b)->a의 변수값과 b의 값이 같지않다면

2)참조형  -> 객체의 주소값(저장된 위치)이 같은지를 비교
                    ======(집주소)

--------------------------------------------------------
주소값=> 변수가 어디에 있는지 위치값(컴퓨터->16진수)
                            '\u0000'~'\uffff'

   =(대입(값을 저장))
-----------------------------------------------
**4.논리연산자=>참과 거짓을 판별시켜주는 연산자

     and, or,not ->자바에서는 이 단어를 사용X =>연산기호
     and(&&)->그리고, or(||)->또는, not(!)->부정


and(&&)->그리고, or(||)=>조건평가

T   T ->T         T
T   F ->F         T
F   T ->F         T
F   F ->F         F

(2>3) && (5<7)=>첫항의 결과에 따라서 두번째항을 계산할 수도
                안할 수도 있는 평가방식->조건평가


  F
&               |          

^(xor)=> T  T,  F  F->두항이 같으면  F
         T  F,  F  T->서로 다르면 참


(2>3) & (5<7) =>모두 평가(첫항의 결과와 상관없이 두번째항을
                          무조건 계산하는 방식)

결론->요즘에는 구분하지 않고 사용한다.(&&,& 큰 의미가 없다.)
      
=============================================================>
제어문을 사용할때 조건식을 사용?


5.대입연산자(=배정연산자)

  자료형(type)------>TypeScript언어(자바스크립트+type이 추가)
   int su=3;
   var su=3;==============>
   
    변수=수식의 결과

   +,-,*,/,%=> int a=3;  

 자기변수에 수식을 계산->값을 자기 변수에 다시 대입시켜주는
 연산자

p114  ---> 10< x <20 =>자바사용 불가->파이썬은 가능

 웹상에서 숫자를 반드시 입력받는 경우->가격,수량,단가

-----------------------------------------------------------
 축약형=>수식을 간략하게 표현

                //a=a+1,a=a-1
                  a+=1, a-=1==>a++,a--
                       선호도
                              =>실행속도가 빠르다
               연산자2개(산술,대입)
               a=a+2; ==>a+=2; -------->연산자 1개사용
               a=a-2; ==>a-=2;
               a=a*2; ==>a*=2;
               a=a/2; ==>a/=2;
               a=a%2;  ==>a%=2

6.삼항연산자(=조건연산자)->if문 대용으로 사용
   ->둘중의 하나를 체크해주는 연산자
 변수명 =조건식?식1(참):식2(거짓)  

------------------------------------------->Op4.java
****************7.캐스트연산자(=형변환 연산자)**************

p74

형변환 개요->수식 연산중간에 자료형이 변환이 일어나는 경우

1.자동형변환(=묵시적인 형변환)

--------------------------------------------->자동형변환
byte(1)->short->int(4)->long(8)->float(4)->double(8)
         char(2)

//byte s=12; 00001100
      short s=12; //2진수->00000000  00001100
      int n=s;//int n=12  00000000 00000000  00000000  00001100

적은데이터값이 큰 용량의 데이터공간에 저장이 될때 자료형이
자동으로 변형이 되어서 저장=>자동형변환

byte b=2; short s=2;
<------------------------------------------------강제형변환

2.강제형변환(=명시적인 형변환)
  OpCast.java

      System.out.println("강제형변환");
      System.out.println("(char)n2="+(char)n2);//66->char로 변환출력->B
      int su=(int)3.5;
      System.out.println("su=>"+su);//강제형변환->데이터의 일부손실이 있다.
      int x=123;
      //double y=x+12.3; int+double->double+double=>double
      float y=x+12.3f;//123(int)+12.3f(float)=123.0f(float)+12.3f(float)
      System.out.println("y=>"+y);
      System.out.println("강제형변환 주의할점");
      byte s2=12;  short s3=45;
      int re=s2+s3;//byte(12)+short(45)=>short+short=short
                               //자바에서 연산의 기본자료형=>int
      short re2=(short)(s2+s3); //int->short로 변환->강제형변환
      //수식인 값을 형변환시킬때에는 (   )로 묶어줘야 된다.
      System.out.println("re=>"+re);
      System.out.println("re2=>"+re2);
================================================================
**형변환을 할때 주의할점**

1.boolean은 형변환하고 상관없다.
2.기본형과 참조형끼리는 형변환이 안된다.
3.수식인 값을 형변환시킬때에는 (   )로 묶어줘야 된다

     byte,short,int,long,float,double
                 기준 ---->int+float=>float
                           int+double=>double
   **자바의 기본연산 자료형=>int
    byte+byte
    byte+short
    short+short==>int로 자동형변환이 된다.
*************************************************************
p99
    byte c=(byte)(a*b) //->int c=a*b

p101 =>System.out.printf()=>Op6printf.java

  [5d]  ->[    10]->5자리 중에서 뒤에서부터 숫자를 출력
  [-5d] ->[10   ]->5자리 중에서 앞에서부터 숫자를 출력
  [05d] ->빈자리수는 0을 채워라 [00010]
-------------------------------------------------------
 변수,상수,연산자->암기
-----------------------
제어문=>생각

문장=>평서문->써준 순서대로 실행이 되는 문장
               (변수,상수,연산자로 구현)

 자판기->커피

      ***제어문->문장의 흐름을 제어해주는 문장***
                            ====

특별한 조건때문에==>종류

***1.조건문(if,if~else)

 형식) if (조건식)
         수행할값

  {
        =>1.하나의 조건식에 따라서 처리해야할 문장
             1개이상일때 블럭처리
        =>2.복잡한 제어문일 경우에는 한문장이라도 블럭처리
            서로 구분(다른 문장)
  }
 
 ***2) if(조건식)
          참인문장
       else
          거짓인문장

2.선택문(switch)
***3.반복문->for,while,do~while
4.탈출문->break,continue,return(추가)
                         ============

IFTest.java->if문
IFTest2.java

p141 ->다중 if문

if문이 여러개 존재->각각 if문에 따라서 처리하는 문장도
다 다른 경우에 사용=>실행속도가 느리다.
                    =>switch ~case문(다중 if문)

ex) 성적처리=>90(A) 80(B),70(C),60(D),60점 미만 F
    돈->택시
        버스
        지하철
if(조건1)
   실행1;
else if(조건2)
   실행2;
else if(조건3)
   실행3;
else if(조건4)
   실행4;
,,
else  //60점 미만
   실행n;
  
==========================
p 142 예제를 할것.(실습)

중첩 if=>if문 내부에 또 다른 if문이 들어가 있는 구문

 if(조건식)                 --->outer if

    if(조건식2)//실행1         ===>inner if
       조건식2에 해당하는 문장
 else
    거짓인 실행문2

================================
입력받은 su값은 짝수입니다.
  or
입력받은 su값은 홀수입니다.
---------------------------------

***전제조건***

 1. 입력받은 값=>1~100값만 입력을 받을 수 있다.
  1~100값을 입력하지 못하게되면
 2.=>입력받은값은 1~100값만 입력이 가능하다.(경고)
 3. 1~100까지 입력받은 값만 짝수,홀수 판별해서 출력

  if(조건식)->1~100까지 입력받은값 체크
    A
  else
    B
  
  if(조건식)->짝수,홀수
    A
  else
    B












































