20일차(쓰레드의 개요및 작성법,동기화)


1.1 응용소프트웨어 개발에 필요한 프로그래밍 언어의 데이터 타입을 적용하여 변수를 사용 할 수있다.

  출제의도: 언어의 데이터타입의 정의와 변수의 개요을 이해한다.

다음중 변수를 선언할때 데이터 타입(자료형)이 필요하다. 이때 이러한 자료형 사이에서는
형변환이 자주 일어나는데 이러한 형변환의 개요와 형변환의 종류(2가지)와 각각의 특징에 
대해서 기술하시오.

==========================================================================
<풀이>
 형변환->변수 끼리의 연산을 할때 적은 데이터의 값이 큰값의 데이터형으로 변환이 되는 것을 의미한다.
                  (+,-,*,/,%,,)
 형변환의 종류

1.자동형변환(=묵시적인 형변환) =>연산중에 자동적으로 자료형이 바뀌는 경우
                                int sum=a+b;  //+,-,*,/ =>연산의 기본자료형

2.강제형변환(=명시적인 형변환) =>(자료형)변수명 
             =>강제로 어떤 특정한 형으로 지정해서 바꾸는 형변환

   float f=(float)3.5

============================================================================
1.1.2 변수의 명명규칙의 특징을 아는대로 2개이상 기술하시오.
      ===============(변수를 만들때 사용하는 규칙)

      =>식별자의 특징을 아는대로 2개이상 기술하시오.
        (변수,클래스,메서드 작성방법)

  출제의도: 언어의 데이터타입의 정의와 변수의 개요을 이해한다.


=========================================================================
<풀이>

**변수의 명명규칙**

 1.대소문자 구분X=>영문자+특수기호+숫자를 조합
                   길이는 제한

   변수->명사형으로 사용
   ex) v_, c_규칙을 정해놓음(회사마다 규칙을 정해주는것이 다 다를수가 있다.)
------------------------------------

 2.숫자가 맨처음에 올 수 없다. ->첫글자는 소문자가 올 수 없다.(X)
 3.특수기호는 _,$만 가능
 4.예약어는 사용불가

==========================================================================


1.2 프로그래밍 언어의 연산자와 명령문을 사용하여 애플리케이션에 필요한 기능을 정의하고 
    사용할 수 있다.

출제의도: 프로그램언어의 구성요소인 연산자와 명령문을 이해할 수 있다.


자바의 메서드는 매개변수와 반환형에 따라 3개의 유형으로 나누는데
메서드의 작성방법 유형 3가지 및 특징을 기술하시오.(매개변수,반환형에 따라서)

A->A'->B
=============================================================================
<풀이>

메서드->자바프로그램의 실행시키기 위한 최소한의 실행단위
           (실행->화면에 결과를 보여주는것)

***메서드의 기능별 분류***

1)매개변수 X  반환형 X =>단순하고,반복적인 일을 수행할때 사용(알바)
                       =>클래스 내부의 멤버변수의 존재유무에 따라서 바뀔수가 있다

2)매개변수 O  반환형 X =>매개변수의 갯수가 많을수록 이 메서드가 해야할일
                        많아진다.(직원)->데이터저장,계산목적,조회(검색할값),,,

3)매개변수 O  반환형 O =>주로 계산목적,웹상에서 주로 사용

===========================================================================
1.2.2 

  프로그램언어의 명령어중 while문과 do~while의 사용방법(형식)과 이 제어문의
  차이점(특성)을 기술하시오.

출제의도: 프로그램언어의 구성요소인 연산자와 명령문을 이해할 수 있다.

==========================================================================
<풀이>

while=>처음부터 조건식이 만약에 거짓이면 한번도 실행되지 않는다.

 while(조건식)
    실행 구문;
=========================================================
do {
    System.out.println("while반복문 연습"+i);=>실행구문
			   i++;
  }while(i<=5);//조건식뒤에 ; 붙일 수 있다.

실행순서->1.do~while구문의 문장부터 실행
          2.while조건식을 체크

**특성

조건식이 거짓이라도 최소 한번은 무조건 실행이 된다.
-----------------------------------------------------------
**do~while=>화면에 데이터(오라클)를 출력할때 (누적의 개념)
          =>벽돌쌓기 (게시판에서 글쓰기)
           기존의 데이터+내가 글쓴 데이터를 한꺼번에 보여주기

============================================================================

1.3 프로그래밍 언어의 사용자 정의 자료형을 정의하고 애플리케이션에서 사용할 수 있다.
   =>객체지향 프로그래밍

 byte-short-int-long->float->double
      char                             boolean

사용자 정의 자료형을 정의==>새로운 자료형을 만들어야 된다.(클래스)

출제의도:추상화의 개요와 설계기법을 이해할 수 있다.

다음은 자동차의 정보를 저장하기위한 클래스를 작성할때 다음과 같은 클래스를 작성
한 경우 소스코드이다.


class Car {

String name;
int output;
int year;
...

public String getName(){
  return name;
}
...

}

위의 소스코드를 참조하여 생성자의 개요와 위의 멤버변수 중 name에 값을
저장할 수있는 문자열 매개변수 한개짜리 생성자를 작성하는 구문을 기술하시오.


=====================================================================
<풀이>
생성자-> 객체가 생성될 때 맨 처음 호출되는 특수한 메서드,초기화시켜주는 메서드,,

public Car(String name){     //public Car(String a){  name=a}
  this.name=name;         
}

=>Car(String t){
  name=t;
}
// Setter,Getter Method 같이 알아둘것.
----------------------------------
public void setName(String name){
   this.name=name;
}

public String getName(){ return name;}
======================================================================
1.3.2
    객체지향 프로그래밍방식의 4가지 중요한 규칙이 있는데,이 4가지를 나열
    하고 추상화의 개요를 기술하시오.

출제의도:추상화의 개요와 설계기법을 이해할 수 있다.

-------------------------------------------------------------------------
<풀이>

 추상화,캡슐화,다형성,상속성

(추상화)=>저장하고 싶은 대상(객체)를 공통속성(특징),공통기능->
          클래스로 만들어내는과정
           =>뼈대(설계도)==========>키워드로 채점 (객체),속성,특징,클래스

======================================================================


2.1 프로그래밍 언어별 특성을 파악하고 설명할 수 있다.

 출제의도:객체지향언어의 특성을 이해하고 프로그램을 작성할 수 있다.

다음중 객체지향적인 관점에서의 상속의 특징(2개이상)과 오버라이딩에 대해서 기술
하시오.


=============================================================================
<풀이>

상속의 특징

 1.부모->멤버변수,메서드를 상속(O)->생성자는 상속불가(X)
    단)private로 선언된 멤버변수와 메서드는 상속불가(X)
 2.다중상속 불가(동시에 한개이상의 부모로부터 상속금지)

   class Child extends Father
   class Child extends Mother

  =>프로그램이 복잡->서로 다른 클래스->똑같은 메서드가 존재하면
  =>단일상속만 가능-->C++(다중 상속을 허용)

  3.상속도 누적제=========>Parent(10억) int a
                                                   |
                                              Child(20억)   int b
                                                   |
                                              GrandChild(30억)->int a,b
                                              =>기능이 많아진다.
  4.상속의 전제 조건->is a 관계가 성립이 되어야 한다.(p316)

  오버라이딩 =>부모로부터 물려받은 메서드 중에서 자식클래스입장에서
               내용이 맞지않을때 자식클래스에 내용에 맞게 내용을
               수정하는 기법(ex 파일 덮어쓰기)

  오버라이딩 만들 조건 <--->***오버로딩도 체크->조건***

  =>부모의 메서드명과 자식의 메서드명이 같게 쓴다.
    반환값을 같게 쓴다.(내용은 다르게 준다.)
====================================================================


2.2 파익된 프로그래밍 언어의 특성을 적용하여 애플리케이션을 구현 할 수 있다.

출제의도:캡슐화의 개요 및 작성법을 이해한다.

다음과 같은 클래스가 존재한다.이 클래스의 su에 접근지정자 private을 적용시키고
   Setter Method를 작성하세요(캡슐화를 적용)

class Test {
   int su;  //int price
   
}


=>정답

 class Test{
   private int su;  //test->setTest

   public void setSu(int su){    public void setSu(int price){
     this.su=su;             =>      su=price;
   }                             }
}
===========================================================================
<풀이>

class Test {
   private int su;
   ////////
   public void setSu(int su){     //public void setPrice(int price)  //getPrice
      this.su=su;
  }
  //////////////////////////////
}

=========================================================================
2.3 애플리케이션을 최적화하기 위해 프로그래밍 언어의 특성을 활용 할 수 있다.

출제의도:프로그램언어의 특성을 이해하고 활용할 수 있다.

다음과 같은 사용자로부터 문자열을 하나 입력을 받아서 그대로 출력하는
 프로그램을 작성하려고 한다. 1)과 2)에 들어갈 자바코드를 완성하시오.


import ______1)__________

public class InputTest{

 public static void main(String args[]){
     System.out.println("문자열을 입력하세요?");
              2) 
     --------------------------------------
     String input=sc.next();
     System.out.println("input="+input);
 }
}

=====================================================
<풀이>

import java.util.*;  //1) or import java.util.Scanner;

Scanner sc=new Scanner(System.in); //2)
//Scanner sc=new Scanner();
=========================================================
2.3.2

  출제의도:프로그램언어의 특성을 이해하고 활용할 수 있다.

   프로그램언어에서 반드시 예외처리를 해야되는 경우가 있다.이에 해당하는
                    ======================================
                             Check Exception->컴파일할때 에러유발
   경우를 2개이상 기술하시오.

==========================================================================
<풀이>

       예외처리의 종류

     4/0->ArithmeticException ->실행할떼 에러발생
          NullPointerException
          NumberFormatException
  --------------------------------------------------

      1)입출력 프로그램을 작성할때->IOException
      2)네트워크 프로그램을 작성할때
      3)DB접속을 해서 처리해주는 JDBC Programming을 할때



==========================================================

3.1 애플리케이션에 필요한 라이브러리를 검색하고 선택할 수 있다.

출제의도:중요한 라이브러리에 해당하는 클래스의 특성을 이해하고 활용할 수 있다.

자바프로그램을 작성할때 컬렉션 객체를 사용할 때가 있다.이 저장구조에 
따른 인터페이스 3가지 종류와 특성을 각각 기술하시오.


=================================================================
<풀이>

1.Set  인터페이스

  ->데이터가 중복 저장이 안되며 저장 되는 순서가 없다.(ex 항아리 구조 X)
  ->Set,HashSet

***2.List  인터페이스->중복저장이 가능,저장순서가 있다(인덱스번호로 구분)
  ->Vector->ArrayList,LinkedList

3.Map 인터페이스->표형태로 저장 (키,값)=>ex)사물함 구조를 연상
                        -=>값을 저장시 키를 부여=>키를 이용->빨리 검색된다.
   ->HashTable,HsahMap=>세션값을 저장시(web)

=============================================================



3.2 애플리케이션 구현을 위해 선택한 라이브러리를 프로그래밍 언어 특성에 맞게 구성할 수있다.

출제의도:애플리케이션 구현을 위한 메서드의 호출유형에 대해서 이해한다.

다음 중 프로그램을 작성할때 메서드의 호출유형의 종류와 특징을 2개이상 기술하시오.


=================================================================================

  **메서드의 종류=>일반메서드,정적메서드,추상메서드
    메서드를 작성하는 이유?

<풀이>
 
1.정적메서드(main)->일반메서드->객체생성->객체명.일반메서드(~)
  정적메서드 내부에서 일반메서드를 참조할 수 없다.->객체없이는 호출X

2.일반메서드->일반메서드->객체명을 생략->this.일반메서드명(~)

3.정적메서드->정적메서드를 호출=>클래스명.정적메서드명(~)
                                클래스명을 생략->정적메서드명(~)

4.생성자->생성자호출=>this(매개변수~);

============================================================================

3.3 선택한 라이브러리를 사용하여 애플리케이션 구현에 적용할 수 있다.

출제의도:라이브러리중 인터페이스의 구조를 통한 설계기법을 적용시킬 수 있다.


interface Movable {                       interface 인터페이스명{
      void add(double dx, double dy);            메서드명;
      void sub(double dx, double dy);      }
}
                           extends
interface MovableScalable    ①    Movable {
      void mul(double s);
}
                    implements
class MovablePoint      ②     Movable {
      double x, y;
            
      public void add(double dx,double dy){}  
      public void sub(double dx,double dy){}
}

밑줄친 ① 과 ②에 들어갈 키워드를 순서대로 나열하고  이 인터페이스의 특징을
2개이상 기술하시오. 

=>이 Movable인터페이스의 특징을 기술하시오.(X)

=========================================================================
<풀이>

 extends          implements

추상클래스와 목적->설계목적(전체 프로그램의 청사진을 위한 설계도)

1.추상메서드,상수만 선언
  public abstract void go(); //
 ->public void go();->abstract 생략가능
 ->구분할 필요X

**2.객체생성 X =>자기 인터페이스를 가지고 자식클래스를 통해서는 객체생성 가능
**3.인터페이스를 상속받은 자식클래스
 ->무조건 추상메서드를 오버라이딩 ->일반메서드
4.추상클래스->단일상속만 지원
  **인터페이스->다중상속을 지원(불완전)->다중구현
5.인터페이스 간에도 상속가능->extends를 사용
                              -------
   자식클래스 implements 부모인터페이스
              ==========
**6.강제성,통일성부여
==========================================================================
3.3.2  프로그램의 객체형변환의 종류와 특징을 기술하시오.

출제의도:객체형변환을 통한 설계기법을 적용시킬 수 있다.

===========================================================================
<풀이>

  종류

 1.객체 자동형 변환->부모형 객체명=new 자식클래스명();
 2.객체 명시적인 형변환->자식형 객체명=(자식형)부모형객체명;

  특징

한 개이상의 상속관계 있는 클래스에서 자식클래스의 객체는 부모형으로 자동
형변환이 일어나지만 반대로 부모클래스의 객체는 자식클래스형으로 자동형변환이
되지를 않는다.=>객체의 명시적인형변환을 줘야 된다.
=============================================================================
->재시험날->1/10일날 Q&A =>별을 중심으로 공부할것.문제풀이
===========================================================
 다음번 시험에 범위 여기서 부터

쓰레드 (13장)

**프로세스->현재 실행중인 응용프로그램
(process)     ->foreground process--->눈에 보이는 부분(응용프로그램탭)
                background process->support(눈에보이지 않게 뒤에서 도와주는
                                            프로세스)

           멀티태스킹->하나이상의 프로세스가 마치 동시에 실행된것 처럼 보임

                     ->cpu가 한개->여러개의 프로그램이 실행할 시간을 배정
                                   (시분할 방식)
--------------------------------------------------------------------------
쓰레드=>개념,작성법=>**동기화** =>DB연동할때 필요

      =>네트워크=>미니 프로젝트(250라인 정도),**DB 작업(웹)**
==============================================================
프로세스->현재 실행중인 응용프로그램
           ->foreground process
               background process->support

쓰레드->응용프로그램 내에서 실행되는 
            최소 실행 단위

쓰레드=>여러개 존재->동시에 실행되는 것처럼(멀티 쓰레드)
         =>데이터를 공유해서 작업=>동기화 작업

쓰레드의 종류

1.p724(사용자 정의 쓰레드)->?
2.메인쓰레드 존재->main()
====================================



웹브라우저->특정 사이트에 접속=======>1.접속(쓰레드)
                  홈페이지를 보여주는 프로그램=>2.홈페이지를 보여주는 쓰레드
                                                              3.동영상,문자,데이터를 보여주는
                                                                  쓰레드
               쓰레드=>여러개 작동->멀티쓰레드

   웹프로그래밍->JSP(홈페이지 작성)->톰캣서버(다양한 요청->처리)
                                                           쓰레드 단위로 요청을 처리
                                                            ->메모리 적게 사용

 **쓰레드의 실행용도**

 1.게임 프로그램(온라인,모바일)->실시간으로 작동
 2.주식,실시간으로 데이터를 화면에 출력
================================================
 =>웹상에서는 자바스크립트->setTimeout함수,setInterval함수를
                         이용->쓰레드 역할을 대신
  ---------------------------------------------------------

public static void sleep(long millis)
                  throws InterruptedException

 이 메서드를 호출하기위해서는 InterruptedException을 반드시
 구현해야 한다는 표시
===========================================================

package j0103;

import java.io.BufferedReader;
import java.io.InputStreamReader;

//2.Runnable인터페이스를 상속받아서 작성하는 경우
//주로 Thread클래스를 상속을 받을 수 없는 경우에 사용->Runnable

public class MultiThread2 {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
       //1.Runnable인터페이스를 상속받은 자식클래스 객체 생성
		/* (1)
		System.out.println("실행시킬 단을 입력?");
		BufferedReader br=new BufferedReader
				                  (new InputStreamReader(System.in));
		int dan=Integer.parseInt(br.readLine());
		GooGoo go=new GooGoo(dan);*/
		GooGoo go=new GooGoo(6);
		//2.Thread객체 생성->생성자에 위의 생성된 자식클래스객체를 매개변수로 전달
		Thread t=new Thread(go);
		//2번째 쓰레드 생성->실행
		PrintThread pt=new PrintThread();
		//3.Thread객체의 start()->내부적으로 run()호출
		t.start(); pt.start();
	}
}

//2.구구단을 출력->Runnable인터페이스를 상속->Thread클래스 상속X

class GooGoo implements Runnable{
	
	private int dan;//단
	
	public GooGoo(int dan) {
		this.dan=dan;//go.dan=7
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int i=1;i<=9;i++) {
			try {
				Thread.sleep(500);
				System.out.println(dan+"단:"+dan+"*"+i+"="+(dan*i));
			}catch(InterruptedException e) {System.out.println(e);}
		}//for
	}
}

//3.임의의 숫자를 속도조절하면서 출력
class PrintThread extends Thread{
	
	public void run() {
		// TODO Auto-generated method stub
		for(int i=1;i<=9;i++) {
			try {
			//난수(임의의 수)발생->0~0.9999999999999999->1X
			//Math.random()*45+1
			long sleeptime=(int)(Math.random()*500+1);
			System.out.println("sleeptime=>"+sleeptime);
			Thread.sleep(sleeptime);
			//Thread.sleep(500);
			System.out.println("i="+i);
			}catch(Exception e) {}
		}//for
	}
}
==================================================

public static void main(String[] args) {
		// TODO Auto-generated method stub
        MyThread my=new MyThread();
        Thread t=new Thread(my);
        t.start();//->run()
       // t.run();->main Thread를 더이상 작동X==>다른 쓰레드를 실행
        System.out.println("MainThread Terminated!");
        System.out.println("MainThread Terminated2");
	}

===========================================================
****start()와 run()의 차이점****

start()-->내부적으로 run()
->메인쓰레드는 그대로 계속 수행하면서 다른 쓰레드를 실시간으로
  실행==>멀티쓰레드가 된다.

run()-->기존의 코드중에서 run()뒤에 있는 구문을 더 이상 수행
         하지 않고 다른 쓰레드를 먼저 실행하기때문에 프로그램
         안정성이 문제가 발생이 된다.

 ==>destroy(),stop,resume()-->시스템에 과부하가 발생할 소지가
                               다분하다.(더이상 사용X)
============================================================
실행결과

MainThread Terminated!
is Running!
MainThread Terminated2
is Running!
is Running!
is Running!
is Running!
=========================================================
좀비쓰레드-->실제로 사용하지 않는데 프로그램이 강제로 종료되
             지 않고 계속 실행이 되는 쓰레드
===========================================================
쓰레드의 작성방법->

   **동기화기법**=>싱글톤 패턴(자바에서 객체를 생성=>한개만 생성)**
                                            
=>멀티쓰레드때문에 나온 배경

i(2)=1
i(2)=2
6단:6*1=6 --->다른 쓰레드
i(2)=3
6단:6*2=12
i(2)=4
i(2)=5
6단:6*3=18
i(2)=6
6단:6*4=24

 쓰레드를 실시간으로 실행->한개 이상의 쓰레드를 조절?

 ***프로세스-------------->데이터를 공유X
    쓰레드의 가장 차이점-->데이터를 공유해서 사용이 가능

    A(대문자),B(소문자)

  resul.txt ==>자원을 공유한다.
              (폴더),공유 프린터


AaBb->섞여서 출력=>공유화가 안된다.

한쪽의 쓰레드가 먼저 수행이 된다면-->다른 쓰레드는 한쪽의 쓰레드가
                                     일을 끝날때까지 기다려주는상태
                                      (대기상태를 유지)

ex)면접대기실 10명---------------->1:1 면접관
------------------------------------------------
 ShareTest.java

 *****Singleton.java=>클래스에서 오직 하나의 객체만 생성시킬 수 있도록 
                 설계->공유해서 사용(추상화 범위)****

  **순서와 개념을 정리**

 package j0103;

//클래스 내부에서 특정객체를 한개만 생성-->외부에서 빌려준다.(대여)->반납
public class Singleton {

	//1.객체를 생성->한개만 생성(공유할 수 있도록->정적 멤버변수로 선언)
	//형식) private static 클래스명 객체명=null;
	private static Singleton instance=null;
	
	//2.객체를 생성->생성자를 호출->형식) private 생성자(){}
	private Singleton() { //외부에서 이 생성자를 호출X->외부에서 객체생성불가
		System.out.println("인스턴스(=객체)생성");
	}
	
	//3.공유객체를 다른 모든 사람들에게 공유해서 사용->정적메서드로 선언
	//형식) public static 클래스의 자료형 정적메서드명() {return 객체명;}
	
	public static Singleton getInstance() {
		if(instance==null) { //아직 안만들어져 있는 상태
			//만들고자하는 객체를 동기화처리=>synchronized(클래스명.class){}
			synchronized(Singleton.class) {
				if(instance==null) {
					instance=new Singleton();
				}
			}
		}
		return instance;
	}
}
-----------------------------------------------------------
네트워크->읽어오기=>네트워크 예제

예외처리->입출력->컬렉션->쓰레드=>네트워크=>종합(미니 프로젝트)
                                                     +
                                             컬렉션(Properties)
                                             (시큐어 코딩 적용)
==============================================================
JDBC Programming=>** 미니프로젝트 **
-------------------------------------







 


