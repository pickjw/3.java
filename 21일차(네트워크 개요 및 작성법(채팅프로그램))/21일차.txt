21일차(쓰레드 동기화 마무리,네트워크 개요 및 작성법(채팅프로그램))

=======================
채팅 프로그램(250 라인)->채팅 프로그램(1000라인)
=======================
 예외처리->입출력->쓰레드->컬렉션->네트워크

-----------------------------------------------------------
네트워크(Network)
                   통신규약(=약속)
같은 데이터 전송 프로토콜(protocol)을 가지고 통신을 하는 연결된
            =======================
                (ex http,ftp,smtp~)
 
장치들을 총칭하는 것을 말한다. 

->import java.net.* ->네트워크
->import java.io.*->입출력(필수)->BufferedReader
->import java.util.*->키보드(Scanner,Vector,ArrayList,,)


**네트워크 기본용어**

1.서버 : 정보나 서비스를 제공하는 측 컴퓨터

             ->1.웹서버->홈페이지 제공->자료실
               2.ftp서버->다운로드(파일)
               3.프린터서버->인쇄공통
               4.메일서버
               ================================
               **5.채팅서버->접속자(문자 전송)**
               ================================

2.클라이언트 : 정보나 서비스를 제공 받는 측 컴퓨터
  client
                 ->(통신망에 연결된) 개인용컴퓨터->host 컴퓨터

3.IP 주소 : 인터넷에 연결된 모든 컴퓨터을 구분하기 위해서 사용하는 것
                 ->192.168.0.57

C:\Users\kitcoop>ipconfig

Windows IP 구성


이더넷 어댑터 로컬 영역 연결:

   연결별 DNS 접미사. . . . :
   링크-로컬 IPv6 주소 . . . . : fe80::80d4:9726:f6e0:b282%11
   IPv4 주소 . . . . . . . . . : 192.168.0.57
   서브넷 마스크 . . . . . . . : 255.255.255.0
   기본 게이트웨이 . . . . . . : 192.168.0.1 =>외부 컴퓨터로 출입구

터널 어댑터 isatap.{21447CDD-CAF0-4C55-9A02-83294D8F9B1A}:

   미디어 상태 . . . . . . . . : 미디어 연결 끊김
   연결별 DNS 접미사. . . . :

C:\Users\kitcoop>


C:\Users\kitcoop>ping 192.168.0.1  =>현재 컴퓨터와의 네트워크 연결상태를
                                     확인하는 명령어->ping ip주소

Ping 192.168.0.1 32바이트 데이터 사용:
192.168.0.1의 응답: 바이트=32 시간=1ms TTL=64
192.168.0.1의 응답: 바이트=32 시간<1ms TTL=64
192.168.0.1의 응답: 바이트=32 시간<1ms TTL=64
192.168.0.1의 응답: 바이트=32 시간<1ms TTL=64

192.168.0.1에 대한 Ping 통계:
    패킷: 보냄 = 4, 받음 = 4, 손실 = 0 (0% 손실),
왕복 시간(밀리초):
    최소 = 0ms, 최대 = 1ms, 평균 = 0ms


4.포트 번호  : 전송된 데이터를 특정 프로그램으로 보내기 위해서는 각 응용 프로그램을 구분해야 하는데 이때 사용되는 것이 포트 번호이다. 
                  포트번호->접속을 하기위한 통로(~1024) 내부 포트번호
                                                                          는 사용불가
                   ex) 8080 ->웹서버
                       21    ->ftp서버

   www.naver.com


   **네트워크로 연결->ip주소,포트번호**

******
 채팅서버----------------------------채팅클라이언트 연결

ServerSocket(클라이언트와 접속하기위해)  ----- Socket
Socket(데이터 전송하기위해 필요)-  ---------클라이언트와 통신
==============================================================

InetAddress 클래스는 자바 프로그램 안에서 IP 번호와 
                     URL 주소를 알아내고 싶을 때 사용한다

네트워크정보를 확인==>NetWorkTest.java

URL(pc),URLConnection(모바일)=>특정사이트에 접속->접속한 컴퓨터의 정보를 가져오기
                              =>파일로 저장
===>URLTest.java
=====================================
소켓 프로그래밍==>자바에서의 네트워크 프로그래밍
*************************
TCP & UDP*(차이점,특성)
*************************

TCP 소켓 =>채팅 프로그램(표준)

 상호 연결된 상태에서 통신하는 방법이기에 
 높은 신뢰성이 요구되는 애플리케이션에 적합하다. 
  ==>데이터를 전송->확인->문제발생->다시 재전송을 한다.
하지만, 

 TCP 소켓의 단점

 높은 신뢰성이 요구되지 않거나 많은 양의 데이터를 전송할 경우에 TCP 소켓은 적합하지 않다.
 왜냐하면 네트워크에 부담을 주기 때문이다. (속도가 느리기 때문에)


UDP
 User Datagram Protocol의 약자로서 TCP 소켓에 비해
 신뢰성과 안정성 측면에서는 뒤떨어진다.(상대방이 제대로 받았는지 확인을 하지
 않기 때문에 신뢰성이 떨어진다.)->많은양의 데이터를 전송할때는 적합
연결을 설정하지 않으므로 네트워크의 부담을 주지 않는다는 장점이 있다. 

 ex)인강할때 (동영상을 시청)
=============================================
 ChatGUIServer.java
 ChatGUIClient.java->미리 배포(정리)->입출력 시간

 서버가 서버소켓을 요청을 준비

try {
			ss=new ServerSocket(5432);//책 7777
			System.out.println("ss=>"+ss);
			System.out.println("채팅서버 가동중.....");
			//무한대기
			while(true) {
				s=ss.accept();//요청을 받아들인다.
				System.out.println("Accepted from "+s);
			}
		}catch(Exception e) {
			System.out.println("서버접속 실패!->"+e);
		}
---------------------------------------------------------------------
2.ChatGUIClient.java

//서버와 연결하는 구문
	   try{
		   //1.접속할 컴퓨터ip주소(서버)->192.168.0.57,포트번호(5432)
		   s=new Socket("192.168.0.57",5432);
		   System.out.println("s="+s);
                  //ConnectionException->IOException->Exception->
                  //->secure coding시 권장코딩
	   }catch(Exception e){
		   System.out.println("접속오류="+e);
	   }
----------------------------------------------------------------------
 서버가 가동이 안된상태 ->클라이언트 실행시 접속 오류

접속오류=java.net.ConnectException: Connection refused: connect
------------------------------------------------------------------------
 서버(DataOutputStream->dos.writeUTF(~)
                                                     DataInputStream
                                                       ->dis.readUTF()=>출력


  ChatGUIServer 클래스->클라이언트와 접속->벡터에 저장
                                 ->쓰레드 객체를 생성->start()호출=>run()
                                 ->ServerThread클래스의 send()호출
  ServerThread클래스
         run()->실시간 호출->CharGUIServer가 가지고 있는 broadCast()호출

 ->1권 6장 클래스와의 관계

        1)has a 관계--->두 개의 클래스를 서로 연결시키는 방법
                           ->서로 간의 메서드가 필요
         //-------------------------------------------------------
         1.상대방의 객체를 자기 클래스의 멤버변수에 선언
            ServerThread  st;
 
         2.자기 클래스의 생성자에서 상대방 클래스의 객체를 생성->자연스럽게연결

         3.객체명.메서드 호출
         //--------------------------------------------------------
        2)is a 관계----->상속할때

3.서로 연결하기위 최종적인 준비단계
                                    while(true) {
				s=ss.accept();//요청을 받아들인다.
				System.out.println("Accepted from "+s);
				//생성자->ServerThread객체를 생성->매개변수로 객체를 전달
				st=new ServerThread(this,s);//생성자 호출
				this.addThread(st);
				//Thread를 가동
				st.start();//->run()
			}
-----------------------------------------------------------------------------------
             c1      ===server=====    c2






