13일차(인터페이스 개요 및 작성법,String 클래스 예제,
       GUI 프로그래밍 Swing)=>이벤트처리 할때(객체형변환)
---------------------------------------------------------
 설계목적

추상클래스-->일반클래스(멤버변수,일반메서드)+추상메서드
인터페이스->상수와 추상메서드로만 구성       ==========
  =>스프링의 필수 구성 요소
-------------------------------------------------------
    public (static final) 멤버변수변수===>정적상수
            =============>생략가능(default)                                   
    public (abstract) 추상메서드 ->일반메서드 사용불가
             생략가능

implements->구현한다.(=보완한다)->상속할때 사용하는 말

*****인터페이스***** 

1.추상클래스와 사용목적이 같다.(=>설계목적)

2.형식) interface 인터페이스명{
      //멤버변수->상수만 가능->static final를 이용해서 정적상수선언

      //추상메서드만 선언이 가능(100%)->일반메서드 사용X
}
3.추상메서드=>예약어 abstract을 사용X (구분할 필요없다)

  public (static final) 타입 상수이름=값
               생략가능

  =>public 타입 상수이름=값 으로 인식

  public (abstract) 메서드명;
              생략가능

**추상클래스와 공통점**

4.인터페이스를 상속받은 자식클래스는 역시 인터페이스에서 선언된
  추상메서드를 반드시 오버라이딩해야 한다.
  (강제성(무조건 오버라이딩해야 되기때문에),
   통일성(=일관성) 부여(메서드의 이름))

**5.객체를 생성하지 않는다.**
====================================
**추상클래스와의 차이점**

1.일반메서드도 포함시킬 수 있다.->인터페이스는 추상메서드만 작성
**2.추상클래스->단일 상속만 가능   -->인터페이스 다중상속이 가능**
                                    (완벽X  implements(보완))
--------------------------------------------------------------

 설계목적

 음악프로그램->음악연주(사운드 프로그램)->기본적인 기능
                                   음악 전원스위치 on
                                   음악 전원스위치 off
                                   Volume을 올리기
                                   Volume을 내리기,,,

         4명의 개발자

  각각 클래스 작성
                        Volume을 올리기
 컴퓨터(A) ->volumeUp()
 핸드폰(B) ->soundUp()
 라디오(C) ->radioUp()
 MP3(D)  ->mp3Up()

     =======>장비가 다 틀리다고 해서 각각 기능은 같은데 메서드명을
            다 다르게 주면 나중에 통합할때 문제가 발생(일관성이 없다)

     ===>강제성이 부여,일관성(통일성)을 부여
    추상클래스,인터페이스->업무를 잘 알고있는 중간관리자
                        모든 클래스에서 공통으로 사용하고자하는 메서드
                        작성(추상메서드)
                     |
     상속->부하직원(추상메서드를 구현)
,,,

오버로딩->메서드명을 통합(하나의 클래스에서 설정)

  Volume(부모)==>2개만 작성
       |
  AdvanceVolume  (자식)=>4개를 다 작성
       |
     TV,Radio,,,에서 실행되는 음악프로그램 작성

  VolTest.java (main())
================================================
 v_, c_ (규칙성)

                                               *
//형식) interface 자식인터페이스명 extends 부모인터페이스
                                                ======
public interface AdvanceVolume extends Volume {
                                    *
//형식) class 자식클래스명 implements 부모인터페이스명
                                    ========(보충한다,보완한다)
                                                         구현한다.
=>인터페이스->설계목적(다중 상속때문에)
class 자식클래스명 extends 부모클래스,부모클래스명2 (X)

class 자식클래스명 implements 부모인터페이스명1,부모인터페이스명2,,,

=>불완전한 다중상속

  늑대인간->인간+늑대

======================================================
  class 늑대인간 extends 사람 implements 늑대,뱀파이어
=======================================================

 자식 클래스-> 부모클래스도 상속받고,인터페이스도 상속

형식) class 자식클래스 extends 부모클래스 implements 부모인터페이스
   =>다중상속을 구현하고 싶을때 작성하는 방법

   class 자식클래스 extends 부모1,부모2 (X)

======================================
     핵심클래스->클래스로 상속
     부가적인 기능->인터페이스로 상속
=======================================
도형->원,삼각형,사각형,다각형,,,면적구하기

  인터페이스 Drawable->도형을 그리는 메서드 선언
  추상클래스 Shape->일반메서드를 사용(장점)
                    double res(면적)
                    원,직사각형 메서드
  
  ShapeTest->main()
==============================================
String클래스를 통해서 문제 풀이(다양한 메서드)
===============================================
StringTest.java 작성->p464,p477 StringBuffer

//문자열=>객체로 취급(기본 자료형이 아니다.
//         =>참조형(클래스형,배열,인터페이스)
                *******************************
		String str="Hello";//권장=>새로 무조건 공간 생성X->없으면 공간생성
		                           //주소값이 같고 내용도 같다
		String str2=new String("Hello");//무조건 새로 공간을 생성=>Hello
		                          //주소값이 다르고 내용은 같다
		String str3="Hello";
		String str4="Hello";
                ********************************
  01234 =>
  Hello  char[]={'H','e','l','l','o'};
         

  문자열이 저장이 되면 중간에 문자열값을 변경X(immutable)
  StringBuffer=>중간에 문자열을 변경시킬수가 있다(mutable)
-----------------------------------------------------------
  StringTest2.java


문자열을 입력하세요?
imsi2
s.concat('test')=>imsi2test
s.substring(1,4)=>msi
s.substring(1)=>msi2
s.toUpperCase()=>IMSI2
s.replace('i','t')=>tmst2
s.length()=>5
s.charAt(2)=>s
s.indexOf('s')=>2
s.trim()=>imsi2
================================

** API문서를 찾을때 

   매개변수->char  =>반환값 boolean =>메서드명 (true|false=isXXXX(ch))
   ===================================================
   java.lang.String->char=>Character클래스 =>대문자체크

  boolean=isXXXXX(char)
   =>메서드==>일반,정적메서드인지 구분?
----------------------------------------------------------
  public static boolean isUpperCase(char ch)=>대문자를 체크해주는 
                                              메서드

  Determines if the specified character is an uppercase character

     **isUpperCase() <---> isLowerCase()

     Character.isUpperCase()

     **대문자로 변환 toUpperCase()
     **소문자로 변환 toLowerCase()
     **isWhitespace(ch)=>공백인지 아닌지를 구분해주는 메서드
    
==========================================================
 ****String클래스와 StringBuffer=>문자열을 변경시킬 수 있는 메서드**

  "ab"+"cd"=>"abcd"

 String s="ab"

 String->+ ==>내부적으로 StringBuffer로 변환->문자열변경->toString()
           ==>String로 변환이 일어난다.


 String s="ab"
  s+="cd";  //s=s+"cd"
  s+="def";
  s+="dddd";

===============>String--->StringBuffer(변경)--->String
                          StringBuffer(변경)--->String(출력할때만)

 속도,메모리사용량을 줄일목적-->많이 사용
==================================================================
   StringBuffTest.java


          ThreeTest.java
실행결과

첫수? 10
두번째수>30
세번째수? 12

최대값은 30
                                      toUpperCase()
Integer클래스 10진수->2진수로 변환->binary
                    ->8진수로 변환->octal
                    ->16진수로 변환->hex

30의 2진수는 11110 ===>메서드 찾기
30의 8진수는 36
30의 16진수는 1E

void getMaxPrint(int a,int b,int c) { //1.매개변수 X  반환값 X
		  int max;//최대값 저장(계산)
	      max=(a>b)?a:b;  //(12 > 4)?12:4->12
	      max=(max>c)?max:c;//max=(12>19)?12:19
	      System.out.println("최대값(max)=>"+max);
	      System.out.println(max+"의 2진수는"+Integer.toBinaryString(max));
	      System.out.println(max+"의 8진수는"+Integer.toOctalString(max));
	      System.out.println(max+"의 16진수는"+Integer.toHexString(max));
	      //return max;
	}
---------------------------------------------------------
 **참조형 매개변수와 참조형 반환형을 이용한 메서드 작성법**
 **AWT,Swing ppt를 읽어보기
============================================================

