15일(GUI 프로그래밍의 이벤트처리 및 **객체형변환**,내부클래스(익명))
                      ==========    ==============

**이벤트 용어**

▶ 이벤트(Event)=>운영체제가 인식가능한 사용자들의 모든 행동양식
                ->1)키보드로 작업
                  2)마우스로 작업
                  3)터치스크린 작업,,,
 
▶ 이벤트 소스(Event Source)==>버튼
	☞ 이벤트가 발생하는 컴포넌트들

   ex)버튼 클릭------------------>메세지큐(신호전달)-->내부적으로
           ====>이벤트 종류                            메서드호출

 
▶ 이벤트 핸들러(Event Handler)->특정이벤트가 발생되었을때 처리해야할
                                 메서드(=함수)

	☞ 이벤트를 처리하기 위한 클래스 만드는것
	☞ 리스너(Listener) 인터페이스 이용

▶ 3단계 이벤트 처리 프로그래밍

1. 이벤트 처리를 해줄 이벤트 소스와 이벤트를 결정 한다.
2. 이벤트 핸들러의 프로그래밍 한다.
3. **이벤트 소스와 이벤트 핸들러의 연결**

 이벤트 종류

**1.ActionEvent	->1)버튼 클릭 2)메뉴를 선택(클릭)
                  3)텍스트입력 enter->채팅

2.KeyEvent      키보드로부터 입력이 일어났을 때 발생

**3.MouseEvent	마우스의 버튼이 눌려지고 띠어질 때, 움직일 때, 드래그(drag) 할 때, 
		마우스의 초점이 컴포넌트 영역에 들어가거나 나올 때 발생
  
4.TextEvent		text area나 text field에서 값이 입력될 때 발생

**5.WindowEvent	윈도우가 활성화(activate)되거나 비활성화 될 때, 아이콘화 될 때, 
			아이콘으로부터 윈도우로 복구될 때, 윈도우가 open, close, quit 될 때 
			발생


이벤트 핸들러->특정 이벤트가 발생->신호가 전달받아서 메서드호출역할

이벤트 클래스    리스너 인터페이스         리스너 인터페이스 메소드

버튼클릭
ActionEvent ------>ActionListener  ->  actionPerform(ActionEvent)
                                                   호출
이벤트종류이름-->1)리스너 신호받음(인터페이스)
                   이벤트종류명Listener (ActionListener)

                 2)Adapter 신호받음(클래스)
                   이벤트종류명Adapter



마우스클릭,드래그앤드롭 할때
MouseEvent	MouseListener		        mouseClicked(MouseEvent)
						mouseEntered(MouseEvent)
						mouseExited(MouseEvent)
						mousePressed(MouseEvent)
						mouseReleased(MouseEvent)
 마우스의 휠을 움직일때 발생
MouseMotionEvent  MouseMotionListener	        mouseDragged(MouseEvent)
						mouseMoved(MouseEvent)

 x버튼을 클릭         ->7개의 메서드를 전부->불편         
WindowEvent	WindowListener		        windowActivated(WindowEvent)
						windowClosed(WindowEvent)

						windowClosing(WindowEvent)
                                                ->System.exit(0);

						windowDeactivated(WindowEvent)
						windowDeiconified(WindowEvent)
						windowIconified(WindowEvent)
						windowOpened(WindowEvent)

                 ***WindowAdapter->추상메서드가 위의 리스너 만큼 존재
                   (추상클래스)->내가 원하는 메서드만 오버라이딩 가능***
=========================================================================
  ActionTest.java

  ** 이벤트처리 해주는 공식 4가지**

1.버튼클릭--->리스너감지->특정메서드 호출

 1)이벤트를 발생-->감지->처리해주는 것을 특정클래스작업(보편적)=>self

import java.awt.*;//그래픽->*->클래스만 적용(파일만)
                            //서브패키지는 적용X
import javax.swing.*;//JFrame

//1.이벤트를 처리
import java.awt.event.*;//

//2.발생이벤트를 감지하는 리스너를 상속------------------------------------
public class ActionTest extends JFrame implements ActionListener{

	JButton b1;
	public ActionTest(String s) {
		  super(s);
		  setBounds(300,300,400,200);//창의 위치,크기지정
		  //버튼생성->부착
		  b1=new JButton("종료");
		  FlowLayout fl=new FlowLayout();
		  getContentPane().setLayout(fl);
		  add(b1);
		  //4.이벤트소스(버튼)->리스너가 감지->메서드호출->연결
		  //형식) 이벤트소스명.addXXXXListener(이벤트객체명);
		  b1.addActionListener(this);//현재 클래스가 처리해주는 경우는 this를 쓴다.
		  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		  setVisible(true);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
            new ActionTest("버튼클릭");
	}
	//3.리스너에 해당하는 메서드를 작성(콜백메서드->운영체제기 자동으로 호출)
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		System.out.println("프로그램종료됨!");
		System.exit(0);
	}
}
-----------------------------------------------------------------------
 **2)이벤트를 감지해서 처리해주는 클래스를 따로 작성하는 경우

  ActionTest2<----------->Other
   버튼만 생성          감지해서 처리해주는 클래스
                  .....
		  /*Other ot=new Other();
		  b1.addActionListener(ot);*///현재 클래스가 처리해주는 경우는 this를 쓴다.
		  b1.addActionListener(new Other());
		  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		  setVisible(true);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
            new ActionTest2("외부클래스가 이벤트처리");
	}
}

//이벤트를 대신 처리해주는 클래스를 따로 작성
class Other implements ActionListener{
	
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		System.out.println("프로그램종료됨!");
		System.exit(0);
	}
}
================================================================
**내부클래스->클래스내부에 또 다른 클래스가 존재하는 경우**

 사용목적->1.접근지정자를 고려->편하게 두개의 클래스를 연결해서 사용
             하고자할때 사용하는 방법

           2.이벤트처리=>코딩의 양을 줄일 수 있기때문에
====================================================================

3.내부클래스=>이름이 있는 내부클래스 ->ActionTest3, Other2

		  b1.addActionListener(ot);*///현재 클래스가 처리해주는 경우는 this를 쓴다.
		  b1.addActionListener(new Other2());
		  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		  setVisible(true);
	}
	//------------------------------------------------
          Outer class내부에 직접 inner class(class Other2)가 들어간 경우

	class Other2 implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			System.out.println("프로그램종료됨!");
			System.exit(0);
		}
	}
	//------------------------------------------------
	public static void main(String[] args) {
		// TODO Auto-generated method stub
            new ActionTest3("내부클래스가 이벤트처리");
	}
}

  ActionTest3.class
  ActionTest3$Other2.class =>하나가 추가
              =====inner 클래스명

**4.내부클래스=>이름이 없는 내부클래스=>익명의 내부클래스 (p411)

   ActionTest4.class
   ActionTest4$1.class =>익명의 클래스는 이름이 없기때문에 번호로 순서를
                         매기면서 만들어진다.

       7-38
---------------------------------------------------------------------
     ActionTest4.java

 형식) Adapter인 경우->클래스
       Listener인 경우->리스너 =>ActionListener

      형식) new 이벤트리스너(){
             호출할 메서드()
         ~

          }

b1.addActionListener(new ActionListener() {
			  //이벤트핸들러 메서드를 지정
			  public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					System.out.println("프로그램종료됨!");
					System.exit(0);
				}
		  }  
          );
-------------------------------------------------------------------------
//x버튼을 클릭->종료
	    //this.addWindowListener(new Test());
	    this.addWindowListener(new WindowAdapter() {
	    	public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				System.out.println("WindowClosing메서드 호출");
				System.exit(0);
			}
	    });
	    setVisible(true);
	}
----------------------------------------------------------------------
ButtonEvent.java로 저장


제품->TV,Computer,Audio,MP3

buy(다양한 제품의 객체명)

=======================================
       Product p=new Product ();
=======================================
   두 클래스는 상속관계 있다.

  형식) 부모클래스명 객체명=new 자식클래스명(); //객체의 자동형변환

p370=> Product p1=new Tv(); ---->Tv t=(Tv)new Product();(X)
       Product p2=new Computer();
       Product p3=new Audio();
=====================================================================
****************p357 객체의 형변환************************************

한 개이상의 상속관계 있는 클래스에서 자식클래스의 객체는 부모형으로 자동
형변환이 일어나지만 반대로 부모클래스의 객체는 자식클래스형으로 자동형변환이
되지를 않는다.=>객체의 명시적인형변환을 줘야 된다.

************************************************************************
  기본형변환
      --------------------------->큰공간으로 자동으로 저장
   byte->short->int->long->float->double
       <--------------------------------작은공간==>(자료형)

  1,2->멤버변수,메서드를 가리킨다.=>멤버변수,메서드의 갯수로 따진다.

 도형(Shape)(1,2) 
      점(Point)(1,2)+(3,4)
          선(Line)(1,2,3,4)+(5,6)
              다각형(Square)(1,2,3,4,5,6)+(7,8)=>1,2,3,4,5,6,7,8

   도형 =new 점()
    점 = (점)new 도형() (X)
===================================================================
 ShapeTest















